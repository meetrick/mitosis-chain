// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mitosis/evmvalidator/v1/params.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the x/evmvalidator module
type Params struct {
	// max_validators is the maximum number of validators
	MaxValidators uint32 `protobuf:"varint,1,opt,name=max_validators,json=maxValidators,proto3" json:"max_validators,omitempty"`
	// max_leverage_ratio is the maximum ratio of (collateral +
	// extra_voting_power) / collateral
	MaxLeverageRatio cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=max_leverage_ratio,json=maxLeverageRatio,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"max_leverage_ratio"`
	// min_voting_power is the minimum voting power required to be a validator
	// if voting power < min_voting_power, the validator will be jailed
	MinVotingPower int64 `protobuf:"varint,3,opt,name=min_voting_power,json=minVotingPower,proto3" json:"min_voting_power,omitempty"`
	// withdrawal_limit is the maximum number of withdrawals that can be processed
	// in a single block (to avoid performance issues)
	WithdrawalLimit uint32 `protobuf:"varint,4,opt,name=withdrawal_limit,json=withdrawalLimit,proto3" json:"withdrawal_limit,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_e61dbaa7ae506248, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMaxValidators() uint32 {
	if m != nil {
		return m.MaxValidators
	}
	return 0
}

func (m *Params) GetMinVotingPower() int64 {
	if m != nil {
		return m.MinVotingPower
	}
	return 0
}

func (m *Params) GetWithdrawalLimit() uint32 {
	if m != nil {
		return m.WithdrawalLimit
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "mitosis.evmvalidator.v1.Params")
}

func init() {
	proto.RegisterFile("mitosis/evmvalidator/v1/params.proto", fileDescriptor_e61dbaa7ae506248)
}

var fileDescriptor_e61dbaa7ae506248 = []byte{
	// 348 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xbf, 0x4a, 0xc3, 0x40,
	0x1c, 0xc7, 0x73, 0x56, 0x8a, 0x06, 0x5a, 0x4b, 0x10, 0x8c, 0x15, 0x92, 0x22, 0x0a, 0x71, 0x68,
	0x8e, 0xe0, 0xe6, 0x58, 0xba, 0xd9, 0xa1, 0x64, 0xe8, 0xe0, 0x12, 0xae, 0xe9, 0x71, 0x39, 0xcc,
	0xe5, 0xc2, 0xdd, 0x99, 0xa6, 0x6f, 0xe1, 0xe8, 0xd8, 0x87, 0xf0, 0x21, 0x3a, 0x16, 0x27, 0x71,
	0x28, 0xd2, 0x2e, 0x6e, 0xbe, 0x82, 0xe4, 0x0f, 0x55, 0xb7, 0xbb, 0x0f, 0xdf, 0xfb, 0xdc, 0x8f,
	0xef, 0x4f, 0xbf, 0x62, 0x54, 0x71, 0x49, 0x25, 0xc4, 0x19, 0xcb, 0x50, 0x4c, 0x67, 0x48, 0x71,
	0x01, 0x33, 0x0f, 0xa6, 0x48, 0x20, 0x26, 0xdd, 0x54, 0x70, 0xc5, 0x8d, 0xb3, 0x3a, 0xe5, 0xfe,
	0x4d, 0xb9, 0x99, 0xd7, 0x3d, 0x0f, 0xb9, 0x64, 0x5c, 0x06, 0x65, 0x0c, 0x56, 0x97, 0xea, 0x4d,
	0xf7, 0x94, 0x70, 0xc2, 0x2b, 0x5e, 0x9c, 0x2a, 0x7a, 0xf9, 0x0d, 0xf4, 0xe6, 0xb8, 0x54, 0x1b,
	0xd7, 0x7a, 0x9b, 0xa1, 0x3c, 0xd8, 0xfb, 0xa4, 0x09, 0x7a, 0xc0, 0x69, 0xf9, 0x2d, 0x86, 0xf2,
	0xc9, 0x1e, 0x1a, 0x81, 0x6e, 0x14, 0xb1, 0x18, 0x67, 0x58, 0x20, 0x82, 0x03, 0x81, 0x14, 0xe5,
	0xe6, 0x41, 0x0f, 0x38, 0xc7, 0x03, 0x6f, 0xb5, 0xb1, 0xb5, 0x8f, 0x8d, 0x7d, 0x51, 0xfd, 0x2c,
	0x67, 0x8f, 0x2e, 0xe5, 0x90, 0x21, 0x15, 0xb9, 0x23, 0x4c, 0x50, 0xb8, 0x18, 0xe2, 0xf0, 0xed,
	0xb5, 0xaf, 0xd7, 0x83, 0x0d, 0x71, 0xe8, 0x77, 0x18, 0xca, 0x47, 0xb5, 0xcb, 0x2f, 0x54, 0x86,
	0xa3, 0x77, 0x18, 0x4d, 0x82, 0x8c, 0x2b, 0x9a, 0x90, 0x20, 0xe5, 0x73, 0x2c, 0xcc, 0x46, 0x0f,
	0x38, 0x0d, 0xbf, 0xcd, 0x68, 0x32, 0x29, 0xf1, 0xb8, 0xa0, 0xc6, 0x8d, 0xde, 0x99, 0x53, 0x15,
	0xcd, 0x04, 0x9a, 0xa3, 0x38, 0x88, 0x29, 0xa3, 0xca, 0x3c, 0x2c, 0x67, 0x3e, 0xf9, 0xe5, 0xa3,
	0x02, 0xdf, 0x1d, 0xbd, 0x2c, 0x6d, 0xf0, 0xb5, 0xb4, 0xc1, 0xe0, 0x7e, 0xb5, 0xb5, 0xc0, 0x7a,
	0x6b, 0x81, 0xcf, 0xad, 0x05, 0x9e, 0x77, 0x96, 0xb6, 0xde, 0x59, 0xda, 0xfb, 0xce, 0xd2, 0x1e,
	0x3c, 0x42, 0x55, 0xf4, 0x34, 0x75, 0x43, 0xce, 0x60, 0x5d, 0x70, 0x9f, 0x0b, 0x02, 0xc3, 0x08,
	0xd1, 0x04, 0xe6, 0xff, 0x57, 0xa2, 0x16, 0x29, 0x96, 0xd3, 0x66, 0xd9, 0xe2, 0xed, 0x4f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xd7, 0x49, 0xcf, 0x60, 0xb7, 0x01, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxValidators != that1.MaxValidators {
		return false
	}
	if !this.MaxLeverageRatio.Equal(that1.MaxLeverageRatio) {
		return false
	}
	if this.MinVotingPower != that1.MinVotingPower {
		return false
	}
	if this.WithdrawalLimit != that1.WithdrawalLimit {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WithdrawalLimit != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.WithdrawalLimit))
		i--
		dAtA[i] = 0x20
	}
	if m.MinVotingPower != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MinVotingPower))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.MaxLeverageRatio.Size()
		i -= size
		if _, err := m.MaxLeverageRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.MaxValidators != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxValidators))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxValidators != 0 {
		n += 1 + sovParams(uint64(m.MaxValidators))
	}
	l = m.MaxLeverageRatio.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.MinVotingPower != 0 {
		n += 1 + sovParams(uint64(m.MinVotingPower))
	}
	if m.WithdrawalLimit != 0 {
		n += 1 + sovParams(uint64(m.WithdrawalLimit))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValidators", wireType)
			}
			m.MaxValidators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxValidators |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLeverageRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxLeverageRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinVotingPower", wireType)
			}
			m.MinVotingPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinVotingPower |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalLimit", wireType)
			}
			m.WithdrawalLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithdrawalLimit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
